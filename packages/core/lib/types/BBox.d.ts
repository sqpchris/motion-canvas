import { Vector2 } from './Vector';
import { InterpolationFunction } from '../tweening';
import { Type } from './Type';
import { Spacing } from './Spacing';
import { CompoundSignal, SignalValue } from '../signals';
export type SerializedBBox = {
    x: number;
    y: number;
    width: number;
    height: number;
};
export type PossibleBBox = SerializedBBox | [number, number, number, number] | Vector2 | undefined;
export type RectSignal<T> = CompoundSignal<PossibleBBox, BBox, 'x' | 'y' | 'width' | 'height', T>;
export declare class BBox implements Type {
    static readonly symbol: unique symbol;
    x: number;
    y: number;
    width: number;
    height: number;
    static createSignal(initial?: SignalValue<PossibleBBox>, interpolation?: InterpolationFunction<BBox>): RectSignal<void>;
    static lerp(from: BBox, to: BBox, value: number | Vector2 | BBox): BBox;
    static arcLerp(from: BBox, to: BBox, value: number, reverse?: boolean, ratio?: number): BBox;
    static fromSizeCentered(size: Vector2): BBox;
    static fromPoints(...points: Vector2[]): BBox;
    static fromBBoxes(...boxes: BBox[]): BBox;
    lerp(to: BBox, value: number | Vector2 | BBox): BBox;
    get position(): Vector2;
    set position(value: Vector2);
    get size(): Vector2;
    get center(): Vector2;
    get left(): number;
    set left(value: number);
    get right(): number;
    set right(value: number);
    get top(): number;
    set top(value: number);
    get bottom(): number;
    set bottom(value: number);
    get topLeft(): Vector2;
    get topRight(): Vector2;
    get bottomLeft(): Vector2;
    get bottomRight(): Vector2;
    get corners(): [Vector2, Vector2, Vector2, Vector2];
    get pixelPerfect(): BBox;
    constructor();
    constructor(from: PossibleBBox);
    constructor(position: Vector2, size: Vector2);
    constructor(x: number, y?: number, width?: number, height?: number);
    transform(matrix: DOMMatrix): BBox;
    transformCorners(matrix: DOMMatrix): Vector2[];
    expand(amount: number): BBox;
    addSpacing(spacing: Spacing): BBox;
    includes(point: Vector2): boolean;
    intersects(other: BBox): boolean;
    intersection(other: BBox): BBox;
    toSymbol(): symbol;
    toString(): string;
    serialize(): SerializedBBox;
}
//# sourceMappingURL=BBox.d.ts.map